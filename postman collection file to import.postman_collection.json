{
	"info": {
		"_postman_id": "ee8ed631-4e8a-4e0b-9b78-f410c67aefaf",
		"name": "Image Segmentation Service Documentation",
		"description": "Welcome to the Image Segmentation Service documentation. This service provides an HTTP endpoint that allows you to send images as input, perform image segmentation using a machine learning model, and receive the segmented images as a response. This documentation will guide you on how to use the service effectively.\n\n## Service Endpoint\n\nTo run the service, execute the script file `runme.sh` in linux/macOs or `runme.bat` in Windows provided in the repository. This script sets up the necessary environment variables and starts the Flask application.\n\nIf you encounter any permission issues, make the script executable by running:\n\n``` bash\nchmod +x runme.sh\n\n```\n\nor run as administrator in Windows.\n\nOnce the service is up and running, you can access the API endpoint using your web browser.\n\nOn the API endpoint page, you will find a file upload form. Click on the \"Choose File\" button to select an image file from your local machine.\n\nOnce you've selected the image file, click the \"Upload\" button to send the image to the service for segmentation.\n\nAfter uploading the image, the service will perform image segmentation using the provided machine learning model. The segmented image will be displayed on the web page.\n\nYou can now view and analyze the segmented image generated by the service.\n\n## Response Codes\n\nThe API uses standard HTTP response codes to indicate the success or failure of a request.\n\n- `200 OK` - The request was successful, and the segmented image is returned in the response.\n- `400 Bad Request` - The request was malformed or missing required parameters.\n- `413 Request Entity Too Large` - The image file size exceeds the maximum limit allowed by the service.\n- `415 Unsupported Media Type` - The provided image format is not supported.\n- `500 Internal Server Error` - An unexpected error occurred on the server.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27811598",
		"_collection_link": "https://galactic-moon-615372.postman.co/workspace/New-Team-Workspace~492046b4-b231-4597-96ae-920c10851852/collection/27811598-ee8ed631-4e8a-4e0b-9b78-f410c67aefaf?action=share&creator=27811598&source=collection_link"
	},
	"item": [
		{
			"name": "Segment Images",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": ""
				},
				"description": "## Endpoint: `POST /`\n\nThis endpoint accepts a POST request with an image file or multiple files as the payload. It performs image segmentation on the provided image and returns the segmented image as the response.\n\n### Request Format\n\n- **HTTP Method:** POST\n- **Endpoint:** `/`\n- **Headers:**\n    - `Content-Type: multipart/form-data`\n- **Request Payload:**\n    - `image` - The image file to be segmented. Must be sent as a binary file.\n\n### Response Format\n\n- **Content-Type:** `image/jpeg` or `image/png` (depending on the original image format)\n- **Response Payload:**\n    - The segmented image as a binary file."
			},
			"response": []
		},
		{
			"name": "Display",
			"request": {
				"method": "DISPLAY",
				"header": [],
				"url": {
					"raw": ""
				},
				"description": "## Endpoint: `DISPLAY /results/`\n\nThis endpoint retrieves the segmented image associated with the specified image list.\n\n### Request Format\n\n- **HTTP Method:** GET\n- **Endpoint:** `/results/`\n    \n\n### Response Format\n\n- **Content-Type:** `image/jpeg` or `image/png` (depending on the original image format)\n- **Response Payload:**\n    - The segmented image as a binary file."
			},
			"response": []
		}
	]
}